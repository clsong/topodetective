#' Get the parameters for some classic population dynamics
#'
#' @param equation_name Name of the classic population dynamics
#' @export
get_classic_dynamics <- function(equation_name) {
if (equation_name == "Hastings") {
eqn1_per <- function(x1, x2, x3) (-x1 - 5 * x2 / (3 * x1 + 1) + 1)
eqn2_per <- function(x1, x2, x3) (-0.1 * x3 / (2 * x2 + 1) + 5 * x1 / (3 * x1 + 1) - 0.4)
eqn3_per <- function(x1, x2, x3) (.1 * x2 / (2 * x2 + 1) - .01)
eqns_per <- list(eqn1_per, eqn2_per, eqn3_per)
state_initial <- c(
x1 = 0.003328141,
x2 = 0.497268520,
x3 = 0.868445870
)
time_range <- seq(0, 50, by = .01)
species_num <- length(eqns_per)
topology_ground <- matrix(c(
-1, -1, 0,
1, 0, -1,
0, 1, 0
), byrow = T, ncol = 3)
}
if (equation_name == "chaos") {
eqn1_per <- function(x1, x2, x3, x4) (1 - x1 - 1.09 * x2 - 1.52 * x3)
eqn2_per <- function(x1, x2, x3, x4) (1 - x2 - .44 * x3 - 1.36 * x4) * .72
eqn3_per <- function(x1, x2, x3, x4) (1 - 2.33 * x1 - x3 - .47 * x4) * 1.53
eqn4_per <- function(x1, x2, x3, x4) (1 - 1.21 * x1 - .51 * x2 - .35 * x3 - x4) * 1.27
eqns_per <- list(eqn1_per, eqn2_per, eqn3_per, eqn4_per)
# eqn1_per <- function(x1,x2,x3,x4) (1 -x1^1.2 - 1.09*x2 - 1.52*x3)
# eqn2_per <- function(x1,x2,x3,x4) (1 -x2 - .44*x3 - 1.36 * x4 + x1*x3) * .72
# eqn3_per <- function(x1,x2,x3,x4) (1- 2.33*x1/(x1+x2) - x3 - .47*x4) * 1.53
# eqn4_per <- function(x1,x2,x3,x4) (1- 1.21*x1 - .51*x2 - .35*x3- x4) * 1.27
state_initial <- c(x1 = .8, x2 = .4, x3 = .3, x4 = .7)
time_range <- seq(0, 200, by = .01)
species_num <- length(eqns_per)
topology_ground <-
matrix(c(
-1, -1.09, -1.52, 0,
0, -1 * .72, -0.44 * .72, -1.36 * .72,
-2.33 * 1.53, 0, -1 * 1.53, -.47 * 1.53,
-1.21 * 1.27, -.51 * 1.27, -.35 * 1.27, -1 * 1.27
), byrow = T, ncol = 4) %>%
as_tibble() %>%
set_names(paste0("x", 1:species_num)) %>%
mutate(species = paste0("x", 1:species_num)) %>%
mutate(r = c(1, .72, 1.53, 1.27))
}
assign("state_initial", state_initial, envir = globalenv())
assign("time_range", time_range, envir = globalenv())
assign("species_num", species_num, envir = globalenv())
assign("eqns_per", eqns_per, envir = globalenv())
assign("topology_ground", topology_ground, envir = globalenv())
}
get_classic_dynamics("chaos") # choose a dynamic
ts <- generate_time_series(eqns_per, time_range, state_initial, species_num) # simulate a dynamic
plot_time_series(ts)
# reg_model <- choose_regression_model("linear")
reg_model <- choose_regression_model("linear")
topology_all <- rep(list(0:1), species_num) %>%
expand.grid() %>%
as_tibble() %>%
mutate(topology_label = row_number()) %>%
nest(topology = -topology_label)
fitted_models <- ts %>%
preprocess_ts() %>%
group_split(species) %>%
map(~fit_interaction_parameters(., reg_model, topology_all)) %>%
bind_rows(.id = "species") %>%
mutate(species = paste0("x", species))
topology_fitted <- fitted_models %>%
filter(R2 > .8) %>%
group_by(species) %>%
sample_n(1) %>%
# filter(R2 == max(R2)) %>%
ungroup()
ts_simu <- simualte_fitted_dynamics(topology_fitted)
topology_fitted <- fitted_models %>%
filter(R2 > .8) %>%
group_by(species) %>%
sample_n(1) %>%
# filter(R2 == max(R2)) %>%
ungroup()
ts_simu <- simualte_fitted_dynamics(topology_fitted)
plot_true_vs_simu(ts, ts_simu)
evaluate_fit(ts, ts_simu)
plot_interaction_topology(topology_ground)
plot_interaction_topology(topology_fitted)
fitted_models %>%
filter(
(species == "x1" & topology_label == 8) |
(species == "x2" & topology_label == 15) |
(species == "x3" & topology_label == 14) |
(species == "x4" & topology_label == 16)
)
toplogy_ground
topology_ground
library(pspline)
ts %>%
mutate_at(vars(matches("x")), log) %>%
mutate_all(~ . - lag(.)) %>%
drop_na() %>%
mutate(row = row_number())
ts %>%
mutate_at(vars(matches("x")), log) %>%
mutate_all(~ . - lag(.)) %>%
drop_na() %>%
mutate(row = row_number()) %>%
gather(key, dlogN, -time, -row)
ts %>%
mutate_at(vars(matches("x")), log) %>%
mutate_all(~ . - lag(.)) %>%
drop_na() %>%
mutate(row = row_number()) %>%
gather(key, dlogN, -time, -row) %>%
group_by(key)
ts %>%
mutate_at(vars(matches("x")), log) %>%
mutate_all(~ . - lag(.)) %>%
drop_na() %>%
mutate(row = row_number())
ts %>%
mutate_at(vars(matches("x")), log)
#   mutate_all(~ . - lag(.)) %>%
#   drop_na() %>%
#   mutate(row = row_number()) %>%
#   gather(key, dlogN, -time, -row) %>%
#   mutate(dlogN_dt = dlogN / time) %>%
#   select(-time, -dlogN) %>%
#   spread(key, dlogN_dt) %>%
#   select(-row) %>%
#   mutate(time = ts$time[-nrow(ts)])
# log_diff <-
ts %>%
mutate_at(vars(matches("x")), log) %>%
mutate(predict(sm.spline(time, x1), time, 1))
#   mutate_all(~ . - lag(.)) %>%
#   drop_na() %>%
#   mutate(row = row_number()) %>%
#   gather(key, dlogN, -time, -row) %>%
#   mutate(dlogN_dt = dlogN / time) %>%
#   select(-time, -dlogN) %>%
#   spread(key, dlogN_dt) %>%
#   select(-row) %>%
#   mutate(time = ts$time[-nrow(ts)])
# log_diff <-
ts %>%
mutate_at(vars(matches("x")), log) %>%
gather(key, logN, -time)
#   mutate_all(~ . - lag(.)) %>%
#   drop_na() %>%
#   mutate(row = row_number()) %>%
#   gather(key, dlogN, -time, -row) %>%
#   mutate(dlogN_dt = dlogN / time) %>%
#   select(-time, -dlogN) %>%
#   spread(key, dlogN_dt) %>%
#   select(-row) %>%
#   mutate(time = ts$time[-nrow(ts)])
# log_diff <-
ts %>%
mutate_at(vars(matches("x")), log) %>%
gather(key, logN, -time) %>%
group_by(key) %>%
mutate(predict(sm.spline(time, logN), time, 1))
#   mutate_all(~ . - lag(.)) %>%
#   drop_na() %>%
#   mutate(row = row_number()) %>%
#   gather(key, dlogN, -time, -row) %>%
#   mutate(dlogN_dt = dlogN / time) %>%
#   select(-time, -dlogN) %>%
#   spread(key, dlogN_dt) %>%
#   select(-row) %>%
#   mutate(time = ts$time[-nrow(ts)])
# log_diff <-
ts %>%
mutate_at(vars(matches("x")), log) %>%
gather(key, logN, -time) %>%
group_by(key) %>%
mutate(dlogN = predict(sm.spline(time, logN), time, 1))
#   mutate_at(vars(matches("x")), log) %>%
#   mutate_all(~ . - lag(.)) %>%
#   drop_na() %>%
#   mutate(row = row_number()) %>%
#   gather(key, dlogN, -time, -row) %>%
#   mutate(dlogN_dt = dlogN / time) %>%
#   select(-time, -dlogN) %>%
#   spread(key, dlogN_dt) %>%
#   select(-row) %>%
#   mutate(time = ts$time[-nrow(ts)])
log_diff <-
ts %>%
mutate_at(vars(matches("x")), log) %>%
gather(key, logN, -time) %>%
group_by(key) %>%
mutate(dlogN = predict(sm.spline(time, logN), time, 1))
log_diff %>%
gather(species, log_change, -time) %>%
left_join(ts, by = "time")
#   mutate_at(vars(matches("x")), log) %>%
#   mutate_all(~ . - lag(.)) %>%
#   drop_na() %>%
#   mutate(row = row_number()) %>%
#   gather(key, dlogN, -time, -row) %>%
#   mutate(dlogN_dt = dlogN / time) %>%
#   select(-time, -dlogN) %>%
#   spread(key, dlogN_dt) %>%
#   select(-row) %>%
#   mutate(time = ts$time[-nrow(ts)])
log_diff <-
ts %>%
mutate_at(vars(matches("x")), log) %>%
gather(key, logN, -time) %>%
group_by(key) %>%
mutate(dlogN = predict(sm.spline(time, logN), time, 1))
log_diff %>%
gather(species, log_change, -time) %>%
left_join(ts, by = "time")
#   mutate_at(vars(matches("x")), log) %>%
#   mutate_all(~ . - lag(.)) %>%
#   drop_na() %>%
#   mutate(row = row_number()) %>%
#   gather(key, dlogN, -time, -row) %>%
#   mutate(dlogN_dt = dlogN / time) %>%
#   select(-time, -dlogN) %>%
#   spread(key, dlogN_dt) %>%
#   select(-row) %>%
#   mutate(time = ts$time[-nrow(ts)])
log_diff <-
ts %>%
mutate_at(vars(matches("x")), log) %>%
gather(key, logN, -time) %>%
group_by(key) %>%
mutate(dlogN_dt = predict(sm.spline(time, logN), time, 1)) %>%
select(-time, -dlogN) %>%
spread(key, dlogN_dt)
#   mutate_at(vars(matches("x")), log) %>%
#   mutate_all(~ . - lag(.)) %>%
#   drop_na() %>%
#   mutate(row = row_number()) %>%
#   gather(key, dlogN, -time, -row) %>%
#   mutate(dlogN_dt = dlogN / time) %>%
#   select(-time, -dlogN) %>%
#   spread(key, dlogN_dt) %>%
#   select(-row) %>%
#   mutate(time = ts$time[-nrow(ts)])
log_diff <-
ts %>%
mutate_at(vars(matches("x")), log) %>%
gather(key, logN, -time) %>%
group_by(key) %>%
mutate(dlogN_dt = predict(sm.spline(time, logN), time, 1)) %>%
select(-time, -logN) %>%
spread(key, dlogN_dt)
#   mutate_at(vars(matches("x")), log) %>%
#   mutate_all(~ . - lag(.)) %>%
#   drop_na() %>%
#   mutate(row = row_number()) %>%
#   gather(key, dlogN, -time, -row) %>%
#   mutate(dlogN_dt = dlogN / time) %>%
#   select(-time, -dlogN) %>%
#   spread(key, dlogN_dt) %>%
#   select(-row) %>%
#   mutate(time = ts$time[-nrow(ts)])
log_diff <-
ts %>%
mutate_at(vars(matches("x")), log) %>%
gather(key, logN, -time) %>%
group_by(key) %>%
mutate(dlogN_dt = predict(sm.spline(time, logN), time, 1)) %>%
ungroup() %>%
select(-time, -logN) %>%
spread(key, dlogN_dt)
ts %>%
mutate_at(vars(matches("x")), log) %>%
gather(key, logN, -time) %>%
group_by(key) %>%
mutate(dlogN_dt = predict(sm.spline(time, logN), time, 1)) %>%
ungroup()
#   mutate_all(~ . - lag(.)) %>%
#   drop_na() %>%
#   mutate(row = row_number()) %>%
#   gather(key, dlogN, -time, -row) %>%
#   mutate(dlogN_dt = dlogN / time) %>%
#   select(-time, -dlogN) %>%
#   spread(key, dlogN_dt) %>%
#   select(-row) %>%
#   mutate(time = ts$time[-nrow(ts)])
# log_diff <-
ts %>%
mutate_at(vars(matches("x")), log) %>%
gather(key, logN, -time) %>%
group_by(key) %>%
mutate(dlogN_dt = predict(sm.spline(time, logN), time, 1)[1]) %>%
ungroup() %>%
select(-time, -logN) %>%
spread(key, dlogN_dt)
#   mutate_all(~ . - lag(.)) %>%
#   drop_na() %>%
#   mutate(row = row_number()) %>%
#   gather(key, dlogN, -time, -row) %>%
#   mutate(dlogN_dt = dlogN / time) %>%
#   select(-time, -dlogN) %>%
#   spread(key, dlogN_dt) %>%
#   select(-row) %>%
#   mutate(time = ts$time[-nrow(ts)])
# log_diff <-
ts %>%
mutate_at(vars(matches("x")), log) %>%
gather(key, logN, -time) %>%
group_by(key) %>%
mutate(dlogN_dt = predict(sm.spline(time, logN), time, 1)) %>%
ungroup() %>%
select(-time, -logN)
#   mutate_all(~ . - lag(.)) %>%
#   drop_na() %>%
#   mutate(row = row_number()) %>%
#   gather(key, dlogN, -time, -row) %>%
#   mutate(dlogN_dt = dlogN / time) %>%
#   select(-time, -dlogN) %>%
#   spread(key, dlogN_dt) %>%
#   select(-row) %>%
#   mutate(time = ts$time[-nrow(ts)])
# log_diff <-
ts %>%
mutate_at(vars(matches("x")), log) %>%
gather(key, logN, -time) %>%
group_by(key) %>%
mutate(dlogN_dt = predict(sm.spline(time, logN), time, 1)) %>%
ungroup() %>%
select(-time, -logN) %>%
spread(key, dlogN_dt)
#   mutate_all(~ . - lag(.)) %>%
#   drop_na() %>%
#   mutate(row = row_number()) %>%
#   gather(key, dlogN, -time, -row) %>%
#   mutate(dlogN_dt = dlogN / time) %>%
#   select(-time, -dlogN) %>%
#   spread(key, dlogN_dt) %>%
#   select(-row) %>%
#   mutate(time = ts$time[-nrow(ts)])
# log_diff <-
ts %>%
mutate_at(vars(matches("x")), log) %>%
gather(key, logN, -time) %>%
group_by(key) %>%
mutate(dlogN_dt = predict(sm.spline(time, logN), time, 1)) %>%
ungroup() %>%
select(-logN) %>%
spread(key, dlogN_dt)
log_diff <- ts %>%
mutate_at(vars(matches("x")), log) %>%
mutate_all(~ . - lag(.)) %>%
drop_na() %>%
mutate(row = row_number()) %>%
gather(key, dlogN, -time, -row) %>%
mutate(dlogN_dt = dlogN / time) %>%
select(-time, -dlogN) %>%
spread(key, dlogN_dt) %>%
select(-row) %>%
mutate(time = ts$time[-nrow(ts)])
log_diff
#   mutate_at(vars(matches("x")), log) %>%
#   mutate_all(~ . - lag(.)) %>%
#   drop_na() %>%
#   mutate(row = row_number()) %>%
#   gather(key, dlogN, -time, -row) %>%
#   mutate(dlogN_dt = dlogN / time) %>%
#   select(-time, -dlogN) %>%
#   spread(key, dlogN_dt) %>%
#   select(-row) %>%
#   mutate(time = ts$time[-nrow(ts)])
log_diff <-
ts %>%
mutate_at(vars(matches("x")), log) %>%
gather(key, logN, -time) %>%
group_by(key) %>%
mutate(dlogN_dt = predict(sm.spline(time, logN), time, 1)) %>%
ungroup() %>%
select(-logN) %>%
spread(key, dlogN_dt)
log_diff %>%
gather(species, log_change, -time) %>%
left_join(ts, by = "time")
library(InferInteractions)
library(InferInteractions)
get_classic_dynamics("chaos") # choose a dynamic
ts <- generate_time_series(eqns_per, time_range, state_initial, species_num) # simulate a dynamic
plot_time_series(ts)
# reg_model <- choose_regression_model("linear")
reg_model <- choose_regression_model("linear")
#' Get the parameters for some classic population dynamics
#'
#' @param equation_name Name of the classic population dynamics
#' @export
get_classic_dynamics <- function(equation_name) {
if (equation_name == "Hastings") {
eqn1_per <- function(x1, x2, x3) (-x1 - 5 * x2 / (3 * x1 + 1) + 1)
eqn2_per <- function(x1, x2, x3) (-0.1 * x3 / (2 * x2 + 1) + 5 * x1 / (3 * x1 + 1) - 0.4)
eqn3_per <- function(x1, x2, x3) (.1 * x2 / (2 * x2 + 1) - .01)
eqns_per <- list(eqn1_per, eqn2_per, eqn3_per)
state_initial <- c(
x1 = 0.003328141,
x2 = 0.497268520,
x3 = 0.868445870
)
time_range <- seq(0, 50, by = .01)
species_num <- length(eqns_per)
topology_ground <- matrix(c(
-1, -1, 0,
1, 0, -1,
0, 1, 0
), byrow = T, ncol = 3)
}
if (equation_name == "chaos") {
eqn1_per <- function(x1, x2, x3, x4) (1 - x1 - 1.09 * x2 - 1.52 * x3)
eqn2_per <- function(x1, x2, x3, x4) (1 - x2 - .44 * x3 - 1.36 * x4) * .72
eqn3_per <- function(x1, x2, x3, x4) (1 - 2.33 * x1 - x3 - .47 * x4) * 1.53
eqn4_per <- function(x1, x2, x3, x4) (1 - 1.21 * x1 - .51 * x2 - .35 * x3 - x4) * 1.27
eqns_per <- list(eqn1_per, eqn2_per, eqn3_per, eqn4_per)
# eqn1_per <- function(x1,x2,x3,x4) (1 -x1^1.2 - 1.09*x2 - 1.52*x3)
# eqn2_per <- function(x1,x2,x3,x4) (1 -x2 - .44*x3 - 1.36 * x4 + x1*x3) * .72
# eqn3_per <- function(x1,x2,x3,x4) (1- 2.33*x1/(x1+x2) - x3 - .47*x4) * 1.53
# eqn4_per <- function(x1,x2,x3,x4) (1- 1.21*x1 - .51*x2 - .35*x3- x4) * 1.27
state_initial <- c(x1 = .8, x2 = .4, x3 = .3, x4 = .7)
time_range <- seq(0, 50, by = .01)
species_num <- length(eqns_per)
topology_ground <-
matrix(c(
-1, -1.09, -1.52, 0,
0, -1 * .72, -0.44 * .72, -1.36 * .72,
-2.33 * 1.53, 0, -1 * 1.53, -.47 * 1.53,
-1.21 * 1.27, -.51 * 1.27, -.35 * 1.27, -1 * 1.27
), byrow = T, ncol = 4) %>%
as_tibble() %>%
set_names(paste0("x", 1:species_num)) %>%
mutate(species = paste0("x", 1:species_num)) %>%
mutate(r = c(1, .72, 1.53, 1.27))
}
assign("state_initial", state_initial, envir = globalenv())
assign("time_range", time_range, envir = globalenv())
assign("species_num", species_num, envir = globalenv())
assign("eqns_per", eqns_per, envir = globalenv())
assign("topology_ground", topology_ground, envir = globalenv())
}
get_classic_dynamics("chaos") # choose a dynamic
ts <- generate_time_series(eqns_per, time_range, state_initial, species_num) # simulate a dynamic
plot_time_series(ts)
# reg_model <- choose_regression_model("linear")
reg_model <- choose_regression_model("linear")
topology_all <- rep(list(0:1), species_num) %>%
expand.grid() %>%
as_tibble() %>%
mutate(topology_label = row_number()) %>%
nest(topology = -topology_label)
fitted_models <- ts %>%
preprocess_ts() %>%
group_split(species) %>%
map(~fit_interaction_parameters(., reg_model, topology_all)) %>%
bind_rows(.id = "species") %>%
mutate(species = paste0("x", species))
fitted_models <- ts %>%
differentiate_ts() %>%
group_split(species) %>%
map(~fit_interaction_parameters(., reg_model, topology_all)) %>%
bind_rows(.id = "species") %>%
mutate(species = paste0("x", species))
fitted_models <- ts %>%
differentiate_ts() %>%
group_split(species) %>%
map(~fit_interaction_parameters(., reg_model, topology_all)) %>%
bind_rows(.id = "species") %>%
mutate(species = paste0("x", species))
topology_fitted <- fitted_models %>%
filter(R2 > .8) %>%
group_by(species) %>%
sample_n(1) %>%
# filter(R2 == max(R2)) %>%
ungroup()
ts_simu <- simualte_fitted_dynamics(topology_fitted)
plot_true_vs_simu(ts, ts_simu)
evaluate_fit(ts, ts_simu)
plot_interaction_topology(topology_ground)
plot_interaction_topology(topology_fitted)
fitted_models %>%
filter(
(species == "x1" & topology_label == 8) |
(species == "x2" & topology_label == 15) |
(species == "x3" & topology_label == 14) |
(species == "x4" & topology_label == 16)
)
topology_ground
fitted_models %>%
filter(R2 > .8)
topology_fitted <- fitted_models %>%
filter(R2 > .95) %>%
group_by(species) %>%
sample_n(1) %>%
# filter(R2 == max(R2)) %>%
ungroup()
ts_simu <- simualte_fitted_dynamics(topology_fitted)
plot_true_vs_simu(ts, ts_simu)
evaluate_fit(ts, ts_simu)
plot_interaction_topology(topology_ground)
plot_interaction_topology(topology_fitted)
fitted_models %>%
filter(
(species == "x1" & topology_label == 8) |
(species == "x2" & topology_label == 15) |
(species == "x3" & topology_label == 14) |
(species == "x4" & topology_label == 16)
)
use_import_from("jtools", "theme_nice")
